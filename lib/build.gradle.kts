/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.3/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    java
    `maven-publish`
    id("com.github.johnrengelman.shadow") version "7.1.2"
}

group = "com.moyskleytech"
version = "1.0.0"
description = "ObsidianStacker"

repositories {
    maven("https://moyskleytech.com/debian/m2")
    maven("https://papermc.io/repo/repository/maven-public/") 
    maven("https://hub.spigotmc.org/nexus/content/repositories/snapshots/")
    mavenCentral()
    mavenLocal()
}

dependencies {
    compileOnly("com.moyskleytech:ObsidianMaterialAPI:1.0.9-r1")
    compileOnly("dev.folia:folia-api:1.20.2-R0.1-SNAPSHOT")
    compileOnly("net.kyori:adventure-platform-bukkit:4.3.2")
    implementation(project(":ObsidianStackerAPI"))
}


// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

publishing {
    publications.create<MavenPublication>("maven") {
        setGroupId("com.moyskleytech")
        setArtifactId("ObsidianStacker")
        setVersion(version)
        artifact(tasks["shadowJar"])
    }
}
task<Exec>("publishToM2") {
    dependsOn("publishToMavenLocal")
    commandLine("bash", "-c", "scp -r ~/.m2/repository/com/moyskleytech/ObsidianStacker/"+version+" moyskleytech.cloud:/opt/deb/m2/com/moyskleytech/ObsidianStacker")
}

tasks {
    publish{
        dependsOn("shadowJar")
    }
    publishToMavenLocal{
        dependsOn("shadowJar")
    }
    assemble {
        dependsOn("shadowJar")
    }

    shadowJar {
        archiveClassifier.set("")
        minimize()
    }

    test {
        useJUnitPlatform()
        java.sourceCompatibility = JavaVersion.VERSION_1_8
    }

    compileJava {
        options.encoding = "UTF-8"
    }
     // Process Placeholders for the plugin.yml
    processResources {
        from("src/resources")
        filesMatching("**/plugin.yml") {
            expand(rootProject.project.properties)
        }

        // Always re-run this task
        outputs.upToDateWhen { false }
    }
}